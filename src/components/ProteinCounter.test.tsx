import { describe, it, expect } from "vitest";
import { render, cleanup } from "@solidjs/testing-library";
import { ProteinCounter } from "./ProteinCounter";

describe("ProteinCounter", () => {
  afterEach(() => {
    cleanup();
  });

  it("ÂêàË®à„Çø„É≥„Éë„ÇØË≥™Èáè„ÇíË°®Á§∫„Åô„Çã", () => {
    const { getByText } = render(() => 
      <ProteinCounter total={15} />
    );
    expect(getByText("ÁèæÂú®„ÅÆ„Çø„É≥„Éë„ÇØË≥™: 15g")).toBeDefined();
  });

  it("20gÈÅîÊàêÊôÇ„Å´Ë¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíË°®Á§∫", () => {
    const { container, getByText } = render(() => 
      <ProteinCounter total={20} />
    );
    
    expect(container.querySelector(".achieved")).toBeDefined();
    expect(getByText("üéâ ÁõÆÊ®ôÈÅîÊàêÔºÅ")).toBeDefined();
  });

  it("„Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÇíÊ≠£„Åó„ÅèË°®Á§∫„Åô„Çã", () => {
    const { getByRole } = render(() => 
      <ProteinCounter total={10} />
    );
    
    const progressBar = getByRole("progressbar") as HTMLElement;
    expect(progressBar.getAttribute("aria-valuenow")).toBe("10");
    expect(progressBar.getAttribute("aria-valuemax")).toBe("20");
    
    const progressFill = progressBar.querySelector(".progress-fill") as HTMLElement;
    expect(progressFill.style.width).toBe("50%");
  });

  it("0g„ÅÆÂ†¥Âêà", () => {
    const { getByText, getByRole } = render(() => 
      <ProteinCounter total={0} />
    );
    
    expect(getByText("ÁèæÂú®„ÅÆ„Çø„É≥„Éë„ÇØË≥™: 0g")).toBeDefined();
    const progressBar = getByRole("progressbar") as HTMLElement;
    const progressFill = progressBar.querySelector(".progress-fill") as HTMLElement;
    expect(progressFill.style.width).toBe("0%");
  });

  it("20g„ÇíË∂Ö„Åà„ÅüÂ†¥Âêà", () => {
    const { getByText, getByRole } = render(() => 
      <ProteinCounter total={25} />
    );
    
    expect(getByText("ÁèæÂú®„ÅÆ„Çø„É≥„Éë„ÇØË≥™: 25g")).toBeDefined();
    expect(getByText("üéâ ÁõÆÊ®ôÈÅîÊàêÔºÅ")).toBeDefined();
    
    const progressBar = getByRole("progressbar") as HTMLElement;
    const progressFill = progressBar.querySelector(".progress-fill") as HTMLElement;
    expect(progressFill.style.width).toBe("125%");
  });

  it("ÁõÆÊ®ô„Åæ„Åß„ÅÆÊÆã„ÇäÈáè„ÇíË°®Á§∫„Åô„Çã", () => {
    const { getByText } = render(() => 
      <ProteinCounter total={15} />
    );
    
    expect(getByText("„ÅÇ„Å®5g")).toBeDefined();
  });

  it("ÁõÆÊ®ôÈÅîÊàêÂæå„ÅØÊÆã„ÇäÈáè„ÇíË°®Á§∫„Åó„Å™„ÅÑ", () => {
    const { queryByText } = render(() => 
      <ProteinCounter total={20} />
    );
    
    expect(queryByText(/„ÅÇ„Å®\d+g/)).toBeNull();
  });
});